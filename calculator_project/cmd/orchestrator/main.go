package main // Объявляем пакет main, т.к. это точка входа в исполняемый файл

import (
	"database/sql" // Импортируем пакет для работы с базами данных
	"fmt"          // Импортируем пакет fmt для форматирования ошибок
	"log"          // Импортируем пакет для логирования сообщений при старте/ошибках

	// Импортируем наш локальный пакет, где находится функция InitDB.
	// Путь здесь зависит от имени твоего модуля в go.mod + путь к файлу внутри проекта.
	// Используем твой ник на GitHub Alehamrom для пути к модулю.
	"github.com/Alehamrom/calculator_project/internal/orchestrator" // <<< Убедись, что этот путь соответствует имени твоего модуля в go.mod
)

func main() {
	log.Println("Запуск сервиса Оркестратора...")

	// Инициализируем базу данных. Функция InitDB откроет или создаст файл БД и таблицы.
	db, err := orchestrator.InitDB() // Вызываем функцию из нашего внутреннего пакета
	if err != nil {
		// Если инициализация БД не удалась, это критическая ошибка.
		// Используем log.Fatalf, чтобы вывести ошибку и остановить выполнение программы.
		log.Fatalf("Ошибка инициализации базы данных: %v", err)
	}

	// Важно! Откладываем закрытие соединения с базой данных до завершения работы функции main.
	// Это гарантирует корректное освобождение ресурсов при выключении сервиса.
	defer db.Close()

	log.Println("База данных успешно инициализирована.")

	// TODO: Здесь в дальнейшем будет код для запуска HTTP-сервера, gRPC-сервера,
	// настройки логики управления задачами и пользователями.
	// На данном шаге сервис просто инициализирует БД и сразу завершит работу.

	log.Println("Сервис Оркестратора запущен (только БД). HTTP и gRPC серверы пока не работают.")
}
