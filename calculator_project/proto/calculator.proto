// Используем синтаксис Protocol Buffers версии 3.
syntax = "proto3";

// Определяем пакет для Protocol Buffers. Это логическое пространство имен.
package calculator;

// Опции для генерации кода на Go.
// Этот параметр указывает, где должен быть сгенерирован Go-код и как будет называться пакет Go.
// "calculator_project/internal/grpc" - путь к папке, где будет сгенерирован код относительно GOPATH/module root.
// ";calculator" - имя пакета Go внутри этой папки.
option go_package = "calculator_project/internal/grpc;calculator";

// --- Определяем структуры данных (Сообщения) ---

// TaskRequest: Сообщение, которое Агент отправляет Оркестратору, чтобы запросить новую задачу.
message TaskRequest {
  // На данный момент достаточно простого сообщения. В будущем можно добавить
  // ID Агента, его возможности и т.д.
  string agent_id = 1; // Опциональное поле: ID агента, который запрашивает задачу
}

// Task: Структура, описывающая одну вычислительную задачу.
// Это то, что Оркестратор будет отправлять Агенту.
message Task {
  string id = 1;         // Уникальный ID задачи (например, UUID в виде строки)
  string operation = 2;  // Тип операции (например, "+", "-", "*", "/", "number" для операнда?)
  string arg1 = 3;       // Первый аргумент. Может быть числом (в виде строки)
                         // или ID другой задачи, от которой зависит этот аргумент.
  string arg2 = 4;       // Второй аргумент (аналогично первому).
}

// TaskResponse: Сообщение, которое Оркестратор отправляет Агенту в ответ на GetTask.
message TaskResponse {
  Task task = 1; // Сама задача. Если задач нет, это поле может быть пустым/nil.
  bool no_task = 2; // Флаг, указывающий, что на данный момент доступных задач нет.
}

// ResultRequest: Сообщение, которое Агент отправляет Оркестратору, сообщая результат выполнения задачи.
message ResultRequest {
  string task_id = 1;     // ID задачи, результат которой отправляется
  double result = 2;      // Результат вычисления задачи (используем double для чисел с плавающей точкой)
  bool success = 3;       // Флаг, указывающий, успешно ли выполнена задача
  string error_message = 4; // Сообщение об ошибке, если success = false (например, "деление на ноль")
  // string agent_id = 5; // ID агента, который выполнил задачу
}

// ResultResponse: Сообщение, которое Оркестратор отправляет Агенту в ответ на SubmitResult.
message ResultResponse {
  bool received = 1; // Флаг, подтверждающий, что Оркестратор получил результат
  // Можно добавить статус обработки результата, если нужно.
}

// --- Определяем gRPC Сервис ---

// CalculatorService: Сервис, который предоставляет удаленные методы (RPC)
// для взаимодействия Агентов с Оркестратором.
service CalculatorService {
  // GetTask: Метод, который Агент вызывает, чтобы получить следующую задачу для выполнения.
  // Он принимает TaskRequest и возвращает TaskResponse.
  rpc GetTask (TaskRequest) returns (TaskResponse);

  // SubmitResult: Метод, который Агент вызывает, чтобы отправить результат выполнения задачи.
  // Он принимает ResultRequest и возвращает ResultResponse.
  rpc SubmitResult (ResultRequest) returns (ResultResponse);
}