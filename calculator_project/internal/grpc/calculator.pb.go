// Используем синтаксис Protocol Buffers версии 3.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0--rc2
// source: calculator.proto

package calculator

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TaskRequest: Сообщение, которое Агент отправляет Оркестратору, чтобы запросить новую задачу.
type TaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	AgentId       string `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // Опциональное поле: ID агента, который запрашивает задачу
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	mi := &file_calculator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_calculator_proto_rawDescGZIP(), []int{0}
}

func (x *TaskRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

// Task: Структура, описывающая одну вычислительную задачу.
// Это то, что Оркестратор будет отправлять Агенту.
type Task struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Operation string                 `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Arg1      string                 `protobuf:"bytes,3,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2          string `protobuf:"bytes,4,opt,name=arg2,proto3" json:"arg2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_calculator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_calculator_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Task) GetArg1() string {
	if x != nil {
		return x.Arg1
	}
	return ""
}

func (x *Task) GetArg2() string {
	if x != nil {
		return x.Arg2
	}
	return ""
}

// TaskResponse: Сообщение, которое Оркестратор отправляет Агенту в ответ на GetTask.
type TaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`                    // Сама задача. Если задач нет, это поле может быть пустым/nil.
	NoTask        bool                   `protobuf:"varint,2,opt,name=no_task,json=noTask,proto3" json:"no_task,omitempty"` // Флаг, указывающий, что на данный момент доступных задач нет.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_calculator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_calculator_proto_rawDescGZIP(), []int{2}
}

func (x *TaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskResponse) GetNoTask() bool {
	if x != nil {
		return x.NoTask
	}
	return false
}

// ResultRequest: Сообщение, которое Агент отправляет Оркестратору, сообщая результат выполнения задачи.
type ResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                   // ID задачи, результат которой отправляется
	Result        float64                `protobuf:"fixed64,2,opt,name=result,proto3" json:"result,omitempty"`                               // Результат вычисления задачи (используем double для чисел с плавающей точкой)
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`                              // Флаг, указывающий, успешно ли выполнена задача
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Сообщение об ошибке, если success = false (например, "деление на ноль")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultRequest) Reset() {
	*x = ResultRequest{}
	mi := &file_calculator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultRequest) ProtoMessage() {}

func (x *ResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultRequest.ProtoReflect.Descriptor instead.
func (*ResultRequest) Descriptor() ([]byte, []int) {
	return file_calculator_proto_rawDescGZIP(), []int{3}
}

func (x *ResultRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ResultRequest) GetResult() float64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ResultRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResultRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// ResultResponse: Сообщение, которое Оркестратор отправляет Агенту в ответ на SubmitResult.
type ResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      bool                   `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"` // Флаг, подтверждающий, что Оркестратор получил результат
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultResponse) Reset() {
	*x = ResultResponse{}
	mi := &file_calculator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultResponse) ProtoMessage() {}

func (x *ResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calculator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultResponse.ProtoReflect.Descriptor instead.
func (*ResultResponse) Descriptor() ([]byte, []int) {
	return file_calculator_proto_rawDescGZIP(), []int{4}
}

func (x *ResultResponse) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

var File_calculator_proto protoreflect.FileDescriptor

const file_calculator_proto_rawDesc = "" +
	"\n" +
	"\x10calculator.proto\x12\n" +
	"calculator\"(\n" +
	"\vTaskRequest\x12\x19\n" +
	"\bagent_id\x18\x01 \x01(\tR\aagentId\"\\\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1c\n" +
	"\toperation\x18\x02 \x01(\tR\toperation\x12\x12\n" +
	"\x04arg1\x18\x03 \x01(\tR\x04arg1\x12\x12\n" +
	"\x04arg2\x18\x04 \x01(\tR\x04arg2\"M\n" +
	"\fTaskResponse\x12$\n" +
	"\x04task\x18\x01 \x01(\v2\x10.calculator.TaskR\x04task\x12\x17\n" +
	"\ano_task\x18\x02 \x01(\bR\x06noTask\"\x7f\n" +
	"\rResultRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06result\x18\x02 \x01(\x01R\x06result\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\",\n" +
	"\x0eResultResponse\x12\x1a\n" +
	"\breceived\x18\x01 \x01(\bR\breceived2\x98\x01\n" +
	"\x11CalculatorService\x12<\n" +
	"\aGetTask\x12\x17.calculator.TaskRequest\x1a\x18.calculator.TaskResponse\x12E\n" +
	"\fSubmitResult\x12\x19.calculator.ResultRequest\x1a\x1a.calculator.ResultResponseB-Z+calculator_project/internal/grpc;calculatorb\x06proto3"

var (
	file_calculator_proto_rawDescOnce sync.Once
	file_calculator_proto_rawDescData []byte
)

func file_calculator_proto_rawDescGZIP() []byte {
	file_calculator_proto_rawDescOnce.Do(func() {
		file_calculator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_calculator_proto_rawDesc), len(file_calculator_proto_rawDesc)))
	})
	return file_calculator_proto_rawDescData
}

var file_calculator_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_calculator_proto_goTypes = []any{
	(*TaskRequest)(nil),    // 0: calculator.TaskRequest
	(*Task)(nil),           // 1: calculator.Task
	(*TaskResponse)(nil),   // 2: calculator.TaskResponse
	(*ResultRequest)(nil),  // 3: calculator.ResultRequest
	(*ResultResponse)(nil), // 4: calculator.ResultResponse
}
var file_calculator_proto_depIdxs = []int32{
	1, // 0: calculator.TaskResponse.task:type_name -> calculator.Task
	0, // 1: calculator.CalculatorService.GetTask:input_type -> calculator.TaskRequest
	3, // 2: calculator.CalculatorService.SubmitResult:input_type -> calculator.ResultRequest
	2, // 3: calculator.CalculatorService.GetTask:output_type -> calculator.TaskResponse
	4, // 4: calculator.CalculatorService.SubmitResult:output_type -> calculator.ResultResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_calculator_proto_init() }
func file_calculator_proto_init() {
	if File_calculator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_calculator_proto_rawDesc), len(file_calculator_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_calculator_proto_goTypes,
		DependencyIndexes: file_calculator_proto_depIdxs,
		MessageInfos:      file_calculator_proto_msgTypes,
	}.Build()
	File_calculator_proto = out.File
	file_calculator_proto_goTypes = nil
	file_calculator_proto_depIdxs = nil
}
